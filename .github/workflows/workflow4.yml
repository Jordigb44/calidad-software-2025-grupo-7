name: Workflow 4 - Nightly Testing & Staging Deployment

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'  
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  multibrowser:
    name: Multibrowser Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            browser: chrome
          - os: ubuntu-latest
            browser: firefox
          - os: windows-latest
            browser: chrome
          - os: windows-latest
            browser: firefox
          - os: macos-latest
            browser: chrome
          # - os: macos-latest
          #   browser: firefox
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Set BROWSER env variable
        run: echo "BROWSER=${{ matrix.browser }}" >> $GITHUB_ENV

      - name: Run Selenium multibrowser test
        run: mvn -Dtest='es.codeurjc.web.nitflex.e2e.TestSeleniumMultibrowser' test

  loadtesting:
    name: Load Testing & Staging Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Unit Tests
        run: mvn -Dtest='es.codeurjc.web.nitflex.unit.**.*' test

      - name: Run Integration Tests
        run: mvn -Dtest='es.codeurjc.web.nitflex.integration.**.*' test

      - name: Run System Tests (except multibrowser)
        run: mvn -Dtest='es.codeurjc.web.nitflex.e2e.**.*' test

      - name: Build Docker image
        run: mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${{ secrets.DOCKER_USERNAME }}/nitflex:${{ github.sha }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nitflex:${{ github.sha }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure (staging)
        run: |
          az container delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name nitflex-staging --yes || true

          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name nitflex-staging \
            --image ${{ secrets.DOCKER_USERNAME }}/nitflex:${{ github.sha }} \
            --registry-login-server index.docker.io \
            --registry-username ${{ secrets.DOCKER_USERNAME }} \
            --registry-password ${{ secrets.DOCKER_TOKEN }} \
            --dns-name-label nitflex-staging \
            --ports 8080 \
            --os-type Linux \
            --cpu 1 \
            --memory 1.5

      - name: Smoke Test on Staging
        run: |
          # smoke test en carpeta artillery artillery run src/test/java/es/codeurjc/web/nitflex/artillery/Â¿?

      - name: Run Load Test with Artillery
        run: |
          npm install -g artillery
          artillery run src/test/java/es/codeurjc/web/nitflex/artillery/load-test.yml

      - name: Stop staging container
        if: always()
        run: |
          az container stop \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name nitflex-staging

  tag-nightly:
    name: Tag Nightly Image
    needs: [multibrowser, loadtesting]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Pull and Retag Docker image
        run: |
          DATE=$(date +'%Y-%m-%d')
          docker pull ${{ secrets.DOCKER_USERNAME }}/nitflex:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/nitflex:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/nitflex:nightly-${DATE}
          docker push ${{ secrets.DOCKER_USERNAME }}/nitflex:nightly-${DATE}
