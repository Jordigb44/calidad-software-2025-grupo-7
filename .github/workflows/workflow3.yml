name: Workflow 3 - Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  push:
    paths:
      - src/**
      - pom.xml
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.VERSION }}
    name: Build, Push Docker Image, and Deploy to Azure

    steps:
    - uses: actions/checkout@v4
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Extract version from pom.xml
        id: extract_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Run tests
        run: mvn test

      - name: Generate Docker image with version tag
        run: mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ steps.extract_version.outputs.VERSION }}

      - name: Tag image as latest
        run: docker tag ${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ steps.extract_version.outputs.VERSION }} ${{ secrets.DOCKERHUB_USERNAME }}/posts:latest

      - name: Extract version from pom.xml
        id: get-version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Generate Docker image
        run: mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ env.VERSION }}

      - name: Login to DockerHub
        run: docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Push versioned image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ steps.extract_version.outputs.VERSION }}

      - name: Push latest image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Extract version from pom.xml
        id: extract_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: 'Deploy container to Azure'
        run: |
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name posts \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/posts:${{ env.VERSION }} \
            --registry-login-server index.docker.io \
            --registry-username ${{ secrets.DOCKERHUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKERHUB_READ_TOKEN }} \
            --dns-name-label posts-${{ secrets.DOCKERHUB_USERNAME }} \
            --ports 8080 \
            --os-type Linux \
            --cpu 1 \
            --memory 1.5

      - name: Run Smoke Test
        run: |
          # Replace with your actual smoke test command.  This is just an example.
          # Assumes your application is running on port 8080.  Adjust as needed.
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://nitflex-production.azurewebsites.net:8080)
          if [ "$STATUS_CODE" -eq "200" ]; then
            echo "Smoke test passed!"
          else
            echo "Smoke test failed. Status code: $STATUS_CODE"
            exit 1
          fi
