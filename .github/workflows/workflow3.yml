name: Workflow 3 - Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build, Push Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Get version from pom.xml
        id: version
        shell: bash
        run: |
          set -e
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | tr -d '\n')
          [ -n "$VERSION" ] || { echo "No se pudo obtener la versiÃ³n"; exit 1; }
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}

      - name: Generate Docker image
        run: mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${{ secrets.DOCKER_USERNAME }}/nitflex-production:latest

      - name: Push image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nitflex-production:latest

      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Run az commands to deploy container '
        run: |
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --image ${{ secrets.DOCKER_USERNAME }}/nitflex-production:latest \
            --registry-login-server index.docker.io \
            --registry-username ${{ secrets.DOCKER_USERNAME }} \
            --registry-password ${{ secrets.DOCKER_TOKEN }} \
            --dns-name-label nitflex-production-${{ secrets.DOCKER_USERNAME }} \
            --ports 8080 \
            --os-type Linux \
            --cpu 1 \
            --memory 1.5 \
#      - name: Run Smoke Test
#        run: |
#          # Replace with your actual smoke test command.  This is just an example.
#          # Assumes your application is running on port 8080.  Adjust as needed.
#          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://nitflex-production.azurewebsites.net:8080)
#          if [ "$STATUS_CODE" -eq "200" ]; then
#            echo "Smoke test passed!"
#          else
#            echo "Smoke test failed. Status code: $STATUS_CODE"
#            exit 1
#          fi