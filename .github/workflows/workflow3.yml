name: Workflow 3 - Deploy to Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'
  workflow_dispatch:
    

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build, Push Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Get version from pom.xml
        id: version
        shell: bash
        run: |
          set -e
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | tr -d '\n')
          [ -n "$VERSION" ] || { echo "No se pudo obtener la versiÃ³n"; exit 1; }
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}

      - name: Generate Docker image
        run: mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${{ secrets.DOCKER_USERNAME }}/nitflex:${{ steps.version.outputs.version }}

      - name: Push image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nitflex:${{ steps.version.outputs.version }}

      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Delete container group if exists
        run: |
          az container delete \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name nitflex-production \
            --yes || true      # Not fail, if not exist

      - name: 'Run az commands to deploy container '
        run: |
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name nitflex-production \
            --image ${{ secrets.DOCKER_USERNAME }}/nitflex:${{ steps.version.outputs.version }} \
            --registry-login-server index.docker.io \
            --registry-username ${{ secrets.DOCKER_USERNAME }} \
            --registry-password ${{ secrets.DOCKER_TOKEN }} \
            --dns-name-label nitflex-production \
            --ports 8080 \
            --os-type Linux \
            --cpu 1 \
            --memory 1.5 \

      - name: Get container URL
        id: get-url
        run: |
          FQDN=$(az container show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name nitflex-production \
            --query "ipAddress.fqdn" -o tsv)
          echo "FQDN=$FQDN" >> $GITHUB_OUTPUT
          echo "Application URL: http://$FQDN:8080"

      - name: Smoke Test on Staging
        run: |
          npm install -g artillery
          artillery run src/test/java/es/codeurjc/web/nitflex/artillery/smoke-test.yml
      
      # - name: Deploy to Azure (production)
      #   run: |
      #     # Eliminar el contenedor existente si existe
      #     az container delete \
      #       --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
      #       --name nitflex-production \
      #       --yes || true
          
      #     # Esperar unos segundos para asegurar que el contenedor se ha eliminado
      #     sleep 5
          
      #     az container create \
      #       --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
      #       --name nitflex-production \